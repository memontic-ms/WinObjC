<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(SolutionDir)\..\common\winobjc.nuproj.common.props" Condition="Exists('$(SolutionDir)\..\common\winobjc.nuproj.common.props')" />
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|ARM">
      <Configuration>Debug</Configuration>
      <Platform>ARM</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|ARM">
      <Configuration>Release</Configuration>
      <Platform>ARM</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <ItemGroup>
    <None Include="Logging.def" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="Telemetry.cpp">
      <CompileAsWinRT>true</CompileAsWinRT>
    </ClCompile>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{862D36C2-CC83-4D04-B9B8-BEF07F479905}</ProjectGuid>
    <RootNamespace>Logging</RootNamespace>
    <ProjectName>Logging</ProjectName>
    <AppContainerApplication>true</AppContainerApplication>
    <OutputName>Logging</OutputName>
    <IncludeOutputsInPackage>false</IncludeOutputsInPackage>
    <IncludeContentInPackage>false</IncludeContentInPackage>
    <PackOnBuild>false</PackOnBuild>
  </PropertyGroup>
  <PropertyGroup Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
  </PropertyGroup>
  <ImportGroup Label="ExtensionSettings">
    <Import Project="$(MSBuildThisFileDirectory)..\..\common\common-build.props" />
  </ImportGroup>
  <!-- IMPORTANT: This is a hack to get both an "in the build project reference" and a nuget reference to
       work together. When a depending project depends on this project via project reference, the project imports
       the packaging props to impersonate its parent packaging project. In this way, a nuget dependency is created.
       In the normal Package project reference where we actually want the contents to be packaged, it has the same package 
       info as the parent project so it gets rolled together nicely. Hooray. :-(    -->
  <Import Project="$(MSBuildThisFileDirectory)..\..\WinObjC.Logging\WinObjC.Logging.Packaging.props" />
  <ItemDefinitionGroup>
    <ClCompile>
      <AdditionalOptions>"/DLOGGING_IMPEXP= " %(AdditionalOptions)</AdditionalOptions>
      <AdditionalIncludeDirectories>%(AdditionalIncludeDirectories);$(MSBuildThisFileDirectory)..\..\AppInsights\Projects\AppInsights_Win10-UAP\ApplicationInsights\;$(MSBuildThisFileDirectory)..\include;</AdditionalIncludeDirectories>
    </ClCompile>
    <Link>
      <ModuleDefinitionFile>Logging.def</ModuleDefinitionFile>
    </Link>
  </ItemDefinitionGroup>
  <ImportGroup Label="ExtensionTargets">
    <Import Project="$(MSBuildThisFileDirectory)..\..\common\common-build.targets" />
  </ImportGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\AppInsights\Projects\AppInsights_Win10-UAP\ApplicationInsights\ApplicationInsights.vcxproj">
      <Project>{96db2b84-5a04-42ce-ad6b-421b199fd193}</Project>
    </ProjectReference>
    <ProjectReference Include="..\lib\LoggingLib.vcxproj">
      <Project>{D3500720-CF56-43AB-A9D6-9DC119A411B8}</Project>
      <IncludeInPackage>false</IncludeInPackage>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <None Include="Project.json" />
  </ItemGroup>
  <Import Project="$(SolutionDir)\..\common\winobjc.nuproj.common.targets" Condition="Exists('$(SolutionDir)\..\common\winobjc.nuproj.common.targets')" />
</Project>