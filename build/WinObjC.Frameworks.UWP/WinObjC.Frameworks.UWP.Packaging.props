<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
      <GitThisAssembly>true</GitThisAssembly>
  </PropertyGroup>
    
  <PropertyGroup>
      <PackageId Condition="'$(IsPackagingProject)' == 'true'">WinObjC.Frameworks.UWP</PackageId>
      <Title>WinObjC.Frameworks.UWP</Title>
      <Authors>Microsoft</Authors>
      <Owners>Microsoft</Owners>
      <Summary>WinObjC.Frameworks.UWP</Summary>
      <Description>WinObjC.Frameworks.UWP</Description>
      <PackageReleaseNotes>
      </PackageReleaseNotes>
      <PackageProjectUrl>
      </PackageProjectUrl>
      <PackageLicenseUrl>
      </PackageLicenseUrl>
      <Copyright>Copyright Â© Microsoft</Copyright>
      <PackageTags>WinObjC.Frameworks.UWP</PackageTags>
      <IncludeSymbolsInPackage>false</IncludeSymbolsInPackage>
      <IncludeFrameworkReferencesInPackage>false</IncludeFrameworkReferencesInPackage>
      <NoPackageAnalysis>true</NoPackageAnalysis>
  </PropertyGroup>

  <!-- Inline task to check for timestamp file existence and creation-->  
  <UsingTask  
    TaskName="CreateTimestampFileIfNeeded"  
    TaskFactory="CodeTaskFactory"  
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll" >  
    <ParameterGroup>
      <TimestampFile ParameterType="System.String" Required="true" />
      <Timestamp ParameterType="System.String" Output="true" />  
    </ParameterGroup>
    <Task>
      <Reference Include="System" />
      <Reference Include="System.IO" />
      <Reference Include="System.Threading" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Threading" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          var mutex = new Mutex(false, TimestampFile.Replace("\\", "."));
          try
          {
            mutex.WaitOne();
          } catch (AbandonedMutexException e)
          {
          }
          if (!File.Exists(TimestampFile)) {
              File.Create(TimestampFile);
          }  

          Timestamp = File.GetCreationTimeUtc(TimestampFile).ToString("yyyyMMddHHmmss");
          mutex.ReleaseMutex();
        ]]>
      </Code>
    </Task>
  </UsingTask>
  
  <PropertyGroup>
    <GetPackageVersionDependsOn>SetPackageVersion;$(GetPackageVersionDependsOn);</GetPackageVersionDependsOn>
  </PropertyGroup>
  <Target Name="SetPackageVersion" DependsOnTargets="$(GitVersionDependsOn)" >

    <Error Condition="'$(GitBranch)' == ''"
           Text="Cannot determine git branch. Please make sure GitInfo is listed in the project.json for this project and that git.exe is part of the PATH environment variable." />

    <Warning Condition="'$(SolutionPath)' == ''"
           Text="Cannot determine solution build time. Package version dependencies may be inconsistent as a result. Please make sure to build using .sln file." />

    <CreateTimestampFileIfNeeded Condition="'$(SolutionDir)' != ''" 
                                 TimestampFile="$(SolutionDir)$(SolutionName).timestamp">
        <Output PropertyName="PackageTimestamp" TaskParameter="Timestamp" />  
    </CreateTimestampFileIfNeeded>



    <PropertyGroup>
      <PackageTimestamp Condition="'$(PackageTimestamp)' == ''">$([System.DateTime]::Now.ToString(yyyyMMddHHmmss))</PackageTimestamp>

      <PackageVersion Condition="'$(PackageVersion)' == '' And '$(GitBranch)' == 'master'">$(GitBaseVersionMajor).$(GitBaseVersionMinor).$(PackageTimestamp)</PackageVersion>
      <PackageVersion Condition="'$(PackageVersion)' == '' And '$(GitBranch)' == 'develop'">$(GitBaseVersionMajor).$(GitBaseVersionMinor).$([MSBuild]::Add('$(GitBaseVersionPatch)', '1'))-$(PackageTimestamp).dev</PackageVersion>
      <PackageVersion Condition="'$(PackageVersion)' == ''">$(GitBaseVersionMajor).$(GitBaseVersionMinor).$([MSBuild]::Add('$(GitBaseVersionPatch)', '1'))-$(PackageTimestamp).pr</PackageVersion>
    </PropertyGroup>
  </Target>

  <Target Name="GitPopulateVersionInfoLatestTag" BeforeTargets= "_GitPopulateVersionInfo" DependsOnTargets="$(GitInfoDependsOn)">
   
    <Exec Command='$(GitExe) describe $(GitDefaultBranch) --tags'
        StandardErrorImportance="low"
        StandardOutputImportance="low"
        ConsoleToMSBuild="true"
        WorkingDirectory="$(GitRoot)"
        ContinueOnError="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitLatestTag"/>
      <Output TaskParameter="ExitCode" PropertyName="MSBuildLastExitCode" />
    </Exec>

    <PropertyGroup>
      <IsValidLatestTag>
        $([System.Text.RegularExpressions.Regex]::IsMatch($(GitLatestTag), $(_GitBaseVersionExpr)))
      </IsValidLatestTag>
      <IsValidLatestTag>$(IsValidLatestTag.Trim())</IsValidLatestTag>

      <GitBaseVersion Condition="'$(IsValidLatestTag)' == 'true'">$(GitLatestTag)</GitBaseVersion>
    </PropertyGroup>

  </Target>
  
</Project>